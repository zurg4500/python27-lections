"=============================================Словари\dicts============================="
# dicts - изменяемый, итерируемый, неупорядоченный, неиндексируемый тип данных для хранения данных в парах (ключ:значение)

#user = {
#    'name':'agent',
#    'age': 113,
#    'last_name':'Koshei'
#}

#print(user['name']) # 'agent'

# При перезаписи переменной будет выводить только последнее значение переменных с одинаковым названием.
# Ключи в словаре будут уникальными, поэтому если в словарь добавить значение по уже существующему ключу, то сохранится последнее значение
#dict1 = {'a':1, 'b':2, 'a':3, 'c':2}
# {'a':3, 'b':2, 'c':2}
#a = 1
#b = 2
#a = 3
#c = 2
# a=3 b=2 c=2

# ключами могут быть только хэшируемые типы данных (неизменяемые типы данных)
# print(hash(10))
#dict1 = {
#     105: 'some value',
#     'key': 'some val 2',
#     (1,2,3): 'SOME VAL 3', 
#      None: 'somebody val 4'
#}

#dict2 = {'a':1, 'b':2, 'c':3}
#dict2['d'] # KeyError: 'd' - обращение по несуществующему индексу

"--------------------------Создание словарей------------------------------------"

#dict2 = {'a':1, 'b':2, 'c':3}
#dict2 = dict([('a', 1), ('b', 2), ('c', 3)])
#print(dict2) # {'a': 1, 'b': 2, 'c': 3}

#list1 = ['a', 'b', 'c']
#list2 = [1,2,3]
#dict3 = dict(zip(list1, list2))
#print(dict3) # {'a': 1, 'b': 2, 'c': 3}

#dict4 = {}
#dict4 ['name'] = 'Sanya'
#dict4 ['last_name'] = 'Ger'
#print(dict4) # {'name': 'Sanya', 'last_name': 'Ger'}

"========================Методы словарей======================"
# get - метод, который примет в себя ключ, если такой
# ключ есть - возрващает его значение. Если такого ключа нет
# - возвращает None(или дефолтное значение)
 
#user = {
#   'name':'agent',
#    'age': 113,
#    'last_name':'Koshei'
#}
#user['id'] # KeyError: 'id'
#user.get('id') # None
#user.get('name') # 'agent'
#user.get('id', default=10) # 
#user.get('age', default=20) # 113 а default=20 - не вернет как значение
# default (значение по умолчанию ) - возвращается, если ключа нет, если есть ключ возвращает его значение


# pop - метод, который принимает ключ, удаляет пару под этим ключом
# и возвращает удаленное значение

#dict1 = {'a':1, 'b':2, 'c':30}
#deleted = dict1.pop('a')
#print(dict1) # {'b':2, 'c':30}
#print(deleted) # 'a':1

# popitem - метод, кооторый удаляет пару, которая была добавлена последней в словарь
#dict1 = {'a':1, 'b':2, 'c':30}
#res = dict1.popitem()
#print(dict1) # {'a': 1, 'b': 2}
#print(res) # ('c', 30)

# update - расширяет словарь, вторым словарем
#dict1 = {'a':1}
#dict2 = {'b':2}
#dict1.update(dict2)
#print(dict1) # {'a': 1, 'b': 2}
#print(dict2) # {'b': 2}

"-------------------------keys, values, items-----------------------------"
# keys - возвращает список ключей
# values - возвращает список назначений
# items - возвращает попарно список ключей

"=======================================Итерируемые словари=========================="

#user = {
#   'name':'agent',
#    'age': 113,
#    'last_name':'Koshei'
#}

#for i in user:
#    print(i)
# name
#age
#last_name

#for i in user.keys():
        # когда итерируем dict_keys - проходимся по ключам
#    print(i)
# 'agent'
#  113
# 'Koshei'

#for key, value in user.items():
        # когда итерируем dict_items - проходимся по парам ключей
#    print(key)
#    print(value)
#    ('name','agent')
#    ('age',113,)
#    ('last_name','Koshei')
 
#dict1= {
#    "a":{"key":1},
#    "b":{"key":2},
#    "c":{"key":3}
#}
#res={}
#for key, value in dict1.items():
#    res[key] = value.get('key')
#print(res) # {'a': 1, 'b': 2, 'c': 3}
